#
# 1D simulation of 100 m flux tube. Uniform grid spacing
#
# 

NOUT = 500     # number of output time-steps
TIMESTEP = 1000.  # time between outputs

MZ = 1     # number of points in z direction (2^n + 1)
MXG = 0    # No guard cells needed in X

[mesh]

nx = 1      # Number of radial points
ny = 200    # Resolution along field-line

length = 100 # Length of the domain in meters

dx = 1             # Radial grid spacing [m]  (doesn't matter)
dy = length / ny   # Parallel grid spacing [m]

ixseps1 = -1   # Branch-cut indices, specifying that
ixseps2 = -1   # the grid is in the SOL

# The following make the field-aligned
# metric tensor an identity metric
Rxy = 1
Bpxy = 1
Btxy = 0
Bxy = 1
hthe = 1
sinty = 0

##################################################
# derivative methods

[ddy]

first = C2
second = C2
upwind = W3

[solver]

mxstep = 10000  # Maximum number of internal steps per output

[SOL1D]

diagnose = true  # Output additional diagnostics

# Normalisation factors
Nnorm = 1e20  # Reference density [m^-3]
Tnorm = 100   # Reference temperature [eV]
Bnorm = 1.0   # Reference magnetic field [T]
AA = 2.0      # Ion atomic number

Eionize = 30  # Energy lost per ionisation [eV]

# Model parameters
vwall = 1.0        # Velocity of neutrals at the wall, as fraction of Franck-Condon energy

frecycle = 0.95            # Recycling fraction
fredistribute = 0.9        # Fraction of recycled neutrals redistributed evenly along length
redist_weight = h(y - pi)  # Weighting for redistribution

gaspuff = 0        # NOTE: In normalised units 
dneut    = 0.0     # Scale neutral gas diffusion rate
nloss    = 1e3     # Neutral gas loss rate [1/s]
fimp = 0.0         # Impurity fraction
sheath_gamma = 6.5 # Sheath heat transmission

atomic = true      # Include atomic processes (CX/iz/rc)

# Set flux tube area as function of parallel grid index
# using normalised y coordinate from 0 to 2pi
area = 1 # + 1.0*h(y - pi) * (y-pi)/pi 

hyper = 100 # Numerical diffusion parameter.

[All]
scale = 0.0

bndry_all = neumann_o2  # Default boundary condition
                        # Note: Sheath boundary applied in code

[Ne] # Electron density 
scale = 1

# Initial conditions
function = 0.1

flux = 9e22  # Particles per m^2 per second input
source = (flux/(0.5*mesh:length))*h(pi - y)  # Particle input source
                           # as function of normalised y coordinate

[NVi]  # Parallel ion momentum
scale = 1
function = 0.03 * y / (2*pi)  # Linear from 0 to 0.03 in y
bndry_target = dirichlet_o2

[P]    # Plasma pressure P = 2 * Ne * T
scale = 1
function=0.1   # Initial constant pressure

powerflux = 2e7  # Input power flux in W/m^2

source = (powerflux*2/3 / (0.5*mesh:length))*h(pi - y)  # Input power as function of y

# 1e7 W/m^2 / (L/2) with  L = 100 m , factor of 2 because power only from y = 0 to y=pi
# * 2/3 to get from energy to Pe

[Nn]
# Neutral density
scale = 1
function = 1e-4   # Initial flat, low density

[NVn]
evolve = true # Evolve neutral momentum?

[Pn]
evolve = true # Evolve neutral pressure? Otherwise Tn = Te model

Tstart = 3.5 # Starting temperature in eV

scale = 1.0
function = Nn:scale * Nn:function * Tstart / SOL1D:Tnorm

